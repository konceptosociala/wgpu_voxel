
// // ========= Sphere =========

// struct Sphere {
//     center: vec3<f32>,
//     radius: f32,
// }

// fn sphere_hit(sphere: Sphere, ray: Ray, t_min: f32, t_max: f32) -> HitRecord {
//     var hit_record = HitRecord();
//     hit_record.hit = false;

//     let cq = sphere.center - ray.origin;
//     let a = dot(ray.direction, ray.direction);
//     let b = -2.0 * dot(ray.direction, cq);
//     let c = dot(cq, cq) - sphere.radius * sphere.radius;
//     let discr = b*b - 4.0*a*c;
    
//     if discr < 0.0 {
//         hit_record.hit = false;
//         return hit_record;   
//     }

//     let discr_sqrt = sqrt(discr);
    
//     var root = (-b - discr_sqrt) / (2.0*a);
//     if root >= t_max || root <= t_min {
//         root = (-b + discr_sqrt) / (2.0*a);
//         if root >= t_max || root <= t_min {
//             hit_record.hit = false;
//             return hit_record;
//         }
//     }

//     hit_record.t = root;
//     hit_record.p = ray_at(ray, hit_record.t);
    
//     let outward_normal = (hit_record.p - sphere.center) / sphere.radius;
//     hit_record = hit_record_set_face_normal(hit_record, ray, outward_normal);

//     hit_record.hit = true;
//     return hit_record;
// }